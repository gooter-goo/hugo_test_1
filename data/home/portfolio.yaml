enabled: true
id: "portfolio"

content:
  - image: "images/vc.jpg"
    pretitle: "Learning Embedded Systems by following "
    title: "The Virtuous Circle"
    text: "Any Embedded System Development will have at least three of - CPU, C/Assembly, Operating Systems, FPGAs and Build Tools! All one has to do is - know a little bit of each of these topics to be useful on a team. The mastery of each of these topics will come naturally with time."

  - image: "images/c.jpg"
    pretitle: "Lower level code is commonly written in"
    title: "C and Assembly!"
    text: "These are the work horses of the Embedded Software Design. The boot code, hardware initialization and certain CPU specific features can only be controlled by writing functions in the assembly language. The higher level more portable system code is written primarily in the C language. This is again because C is very close to the hardware and developers can predict the assembly that will be generated by compiling the C code..."

  - image: "images/cpu.jpg"
    pretitle: "At the heart of every Embedded System is one or more "
    title: "CPUs"
    text: "In modern day systems, CPUs are used to drive the decision and shift the system from one state to another. Take an example of Washing Machine. Monitoring what program the user has selected, driving different parts of the machine (drum, pump, heater etc) to execute the selected program, etc is done by one or many CPUs. Almost always, there will be a CPU that needs to be programmed as part of an Embedded systems based solution. Learning how CPUs work (the generic theory) is extremely helpful and allows one to reason deeply about how the system works..."

  - image: "images/os.jpg"
    pretitle: "as the hardware becomes more complex, the management is abstracted using"
    title: "Operating Systems!"
    text: "How can we get one CPU to execute code for multiple tasks in a round robin fashion? The answer is - Using a Scheduler. Such a layer of software that manages tasks and then by extension the hardware is referred to as the Operating System."

  - image: "images/fpga.jpg"
    pretitle: "What are and why learn"
    title: "FPGAs"
    text: "Field-Programmable Gate Arrays  (FPGAs) play a unique role in embedded
systems development by providing a flexible and reconfigurable platform
for implementing custom digital logic. Unlike Application-Specific
Integrated Circuits  (ASICs), which are designed specifically for a
particular task, FPGAs can be programmed to perform a wide range of
functions, allowing developers to quickly prototype, test, and deploy
complex algorithms or protocols. In an embedded system, FPGAs can be used
to accelerate specific tasks, such as signal processing, encryption, or
compression, while also reducing power consumption and increasing system
reliability. Additionally, FPGAs can serve as a bridge between software
and hardware development, allowing developers to implement algorithms in
software and then optimize them for hardware execution on the FPGA before
implementing them in an ASIC."

  - image: "images/build.jpg"
    pretitle: "The reasons for learning "
    title: "Build Tools"
    text: "Built tools such as GCC (GNU Compiler Collection) play a crucial role in
embedded systems development by providing a means to compile, assemble,
and link code for microcontrollers and other embedded processors. GCC is
particularly well-suited for embedded systems due to its ability to
generate optimized machine code for specific target architectures, taking
into account the limited resources and constraints of these devices. With
GCC, developers can write C or assembly language code on a host platform
and then compile it to run natively on an embedded processor, without
requiring any knowledge of low-level programming languages or
hardware-specific details. This allows developers to focus on implementing
the system's logic and functionality, rather than worrying about the
intricacies of the target processor. Additionally, GCC provides features
such as debugging symbols, profiling information, and optimization options
that can be used to fine-tune code performance and debug issues in
embedded systems."
